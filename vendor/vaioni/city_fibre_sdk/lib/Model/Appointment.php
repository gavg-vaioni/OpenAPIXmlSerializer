<?php
/**
 * Appointment
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Vaioni\CityFibreAPI
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * CityFibre Provisioning API - NICC ALA
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.30
 * Contact: customer-api-queries@cityfibre.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.3.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Vaioni\CityFibreAPI\Model;

use \ArrayAccess;
use \Vaioni\CityFibreAPI\ObjectSerializer;

/**
 * Appointment Class Doc Comment
 *
 * @category Class
 * @package  Vaioni\CityFibreAPI
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class Appointment implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'appointment';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'appointment_date' => 'mixed',
        'appointment_start_time' => 'mixed',
        'appointment_end_time' => 'mixed',
        'appointment_reservation_key' => 'mixed',
        'appointment_reservation_valid_until' => 'mixed'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'appointment_date' => null,
        'appointment_start_time' => null,
        'appointment_end_time' => null,
        'appointment_reservation_key' => null,
        'appointment_reservation_valid_until' => 'date-time'
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'appointment_date' => true,
		'appointment_start_time' => true,
		'appointment_end_time' => true,
		'appointment_reservation_key' => true,
		'appointment_reservation_valid_until' => true
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'appointment_date' => 'appointmentDate',
        'appointment_start_time' => 'appointmentStartTime',
        'appointment_end_time' => 'appointmentEndTime',
        'appointment_reservation_key' => 'appointmentReservationKey',
        'appointment_reservation_valid_until' => 'appointmentReservationValidUntil'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'appointment_date' => 'setAppointmentDate',
        'appointment_start_time' => 'setAppointmentStartTime',
        'appointment_end_time' => 'setAppointmentEndTime',
        'appointment_reservation_key' => 'setAppointmentReservationKey',
        'appointment_reservation_valid_until' => 'setAppointmentReservationValidUntil'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'appointment_date' => 'getAppointmentDate',
        'appointment_start_time' => 'getAppointmentStartTime',
        'appointment_end_time' => 'getAppointmentEndTime',
        'appointment_reservation_key' => 'getAppointmentReservationKey',
        'appointment_reservation_valid_until' => 'getAppointmentReservationValidUntil'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('appointment_date', $data ?? [], null);
        $this->setIfExists('appointment_start_time', $data ?? [], null);
        $this->setIfExists('appointment_end_time', $data ?? [], null);
        $this->setIfExists('appointment_reservation_key', $data ?? [], null);
        $this->setIfExists('appointment_reservation_valid_until', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['appointment_date'] === null) {
            $invalidProperties[] = "'appointment_date' can't be null";
        }
        if (!preg_match("^[0-9]{4}-[0-9]{2}-[0-9]{2}.*$", $this->container['appointment_date'])) {
            $invalidProperties[] = "invalid value for 'appointment_date', must be conform to the pattern ^[0-9]{4}-[0-9]{2}-[0-9]{2}.*$.";
        }

        if ($this->container['appointment_start_time'] === null) {
            $invalidProperties[] = "'appointment_start_time' can't be null";
        }
        if ((mb_strlen($this->container['appointment_start_time']) > 5)) {
            $invalidProperties[] = "invalid value for 'appointment_start_time', the character length must be smaller than or equal to 5.";
        }

        if ($this->container['appointment_end_time'] === null) {
            $invalidProperties[] = "'appointment_end_time' can't be null";
        }
        if ((mb_strlen($this->container['appointment_end_time']) > 5)) {
            $invalidProperties[] = "invalid value for 'appointment_end_time', the character length must be smaller than or equal to 5.";
        }

        if ($this->container['appointment_reservation_key'] === null) {
            $invalidProperties[] = "'appointment_reservation_key' can't be null";
        }
        if ((mb_strlen($this->container['appointment_reservation_key']) > 36)) {
            $invalidProperties[] = "invalid value for 'appointment_reservation_key', the character length must be smaller than or equal to 36.";
        }

        if ($this->container['appointment_reservation_valid_until'] === null) {
            $invalidProperties[] = "'appointment_reservation_valid_until' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets appointment_date
     *
     * @return mixed
     */
    public function getAppointmentDate()
    {
        return $this->container['appointment_date'];
    }

    /**
     * Sets appointment_date
     *
     * @param mixed $appointment_date Date of the appointment
     *
     * @return self
     */
    public function setAppointmentDate($appointment_date)
    {

        if ((!preg_match("^[0-9]{4}-[0-9]{2}-[0-9]{2}.*$", $appointment_date))) {
            throw new \InvalidArgumentException("invalid value for \$appointment_date when calling Appointment., must conform to the pattern ^[0-9]{4}-[0-9]{2}-[0-9]{2}.*$.");
        }


        if (is_null($appointment_date)) {
            array_push($this->openAPINullablesSetToNull, 'appointment_date');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('appointment_date', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        $this->container['appointment_date'] = $appointment_date;

        return $this;
    }

    /**
     * Gets appointment_start_time
     *
     * @return mixed
     */
    public function getAppointmentStartTime()
    {
        return $this->container['appointment_start_time'];
    }

    /**
     * Sets appointment_start_time
     *
     * @param mixed $appointment_start_time Appointment start time
     *
     * @return self
     */
    public function setAppointmentStartTime($appointment_start_time)
    {
        if ((mb_strlen($appointment_start_time) > 5)) {
            throw new \InvalidArgumentException('invalid length for $appointment_start_time when calling Appointment., must be smaller than or equal to 5.');
        }


        if (is_null($appointment_start_time)) {
            array_push($this->openAPINullablesSetToNull, 'appointment_start_time');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('appointment_start_time', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        $this->container['appointment_start_time'] = $appointment_start_time;

        return $this;
    }

    /**
     * Gets appointment_end_time
     *
     * @return mixed
     */
    public function getAppointmentEndTime()
    {
        return $this->container['appointment_end_time'];
    }

    /**
     * Sets appointment_end_time
     *
     * @param mixed $appointment_end_time Appointment end time
     *
     * @return self
     */
    public function setAppointmentEndTime($appointment_end_time)
    {
        if ((mb_strlen($appointment_end_time) > 5)) {
            throw new \InvalidArgumentException('invalid length for $appointment_end_time when calling Appointment., must be smaller than or equal to 5.');
        }


        if (is_null($appointment_end_time)) {
            array_push($this->openAPINullablesSetToNull, 'appointment_end_time');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('appointment_end_time', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        $this->container['appointment_end_time'] = $appointment_end_time;

        return $this;
    }

    /**
     * Gets appointment_reservation_key
     *
     * @return mixed
     */
    public function getAppointmentReservationKey()
    {
        return $this->container['appointment_reservation_key'];
    }

    /**
     * Sets appointment_reservation_key
     *
     * @param mixed $appointment_reservation_key The unique key for appointment reservation
     *
     * @return self
     */
    public function setAppointmentReservationKey($appointment_reservation_key)
    {
        if ((mb_strlen($appointment_reservation_key) > 36)) {
            throw new \InvalidArgumentException('invalid length for $appointment_reservation_key when calling Appointment., must be smaller than or equal to 36.');
        }


        if (is_null($appointment_reservation_key)) {
            array_push($this->openAPINullablesSetToNull, 'appointment_reservation_key');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('appointment_reservation_key', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        $this->container['appointment_reservation_key'] = $appointment_reservation_key;

        return $this;
    }

    /**
     * Gets appointment_reservation_valid_until
     *
     * @return mixed
     */
    public function getAppointmentReservationValidUntil()
    {
        return $this->container['appointment_reservation_valid_until'];
    }

    /**
     * Sets appointment_reservation_valid_until
     *
     * @param mixed $appointment_reservation_valid_until Reservation until date
     *
     * @return self
     */
    public function setAppointmentReservationValidUntil($appointment_reservation_valid_until)
    {

        if (is_null($appointment_reservation_valid_until)) {
            array_push($this->openAPINullablesSetToNull, 'appointment_reservation_valid_until');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('appointment_reservation_valid_until', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        $this->container['appointment_reservation_valid_until'] = $appointment_reservation_valid_until;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


